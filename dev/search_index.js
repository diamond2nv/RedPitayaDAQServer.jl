var documenterSearchIndex = {"docs":
[{"location":"cluster.html#Cluster-1","page":"Cluster","title":"Cluster","text":"","category":"section"},{"location":"cluster.html#","page":"Cluster","title":"Cluster","text":"The RedPitayaDAQServer allows to use multiple RedPitayas in a fully synchronized fashion. One of the RedPitayas will act as the master and distribute its clock to all other RedPitayas acting as slaves.","category":"page"},{"location":"cluster.html#Prerequisites-1","page":"Cluster","title":"Prerequisites","text":"","category":"section"},{"location":"cluster.html#","page":"Cluster","title":"Cluster","text":"Unfortunately, the STEMlab 125-4 does not allow cluster synchronization without hardware modifications.   It is therefore necessary to resolder all slaves according to this documentation. The required mode for this project is 'Directly from FPGA'.","category":"page"},{"location":"cluster.html#Clock-Distribution-1","page":"Cluster","title":"Clock Distribution","text":"","category":"section"},{"location":"cluster.html#","page":"Cluster","title":"Cluster","text":"The clock is distributed from the master to the first slave via an SATA cable. Additional slaves can be used by connecting the next slave to the previous one.","category":"page"},{"location":"cluster.html#Trigger-Distribution-1","page":"Cluster","title":"Trigger Distribution","text":"","category":"section"},{"location":"cluster.html#","page":"Cluster","title":"Cluster","text":"In order to send a mutual trigger signal for starting the acquisition and the signal generation, you also have to connect the master's DIO5_P pin (see link) with the DIO0_P pin of all devices including the master.","category":"page"},{"location":"client.html#Client-1","page":"Client","title":"Client","text":"","category":"section"},{"location":"scpi.html#SCPI-Interface-1","page":"SCPI Interface","title":"SCPI Interface","text":"","category":"section"},{"location":"architecture.html#Architecture-1","page":"Architecture","title":"Architecture","text":"","category":"section"},{"location":"architecture.html#","page":"Architecture","title":"Architecture","text":"The RedPitayaDAQServer project has an architecture where the following three parts are communicating through different protocols:","category":"page"},{"location":"architecture.html#","page":"Architecture","title":"Architecture","text":"FPGA on the RedPitaya\nServer running on the CPU of the RedPitaya\nClient on the host computer","category":"page"},{"location":"architecture.html#FPGA-Server-Interface-1","page":"Architecture","title":"FPGA - Server Interface","text":"","category":"section"},{"location":"architecture.html#","page":"Architecture","title":"Architecture","text":"The FPGA image is directly connected to certain memory regions that can be memory mapped on the CPU of the RedPitaya. The C library rp-daq-lib located in src/lib/ encapsulates these memory accessed into a convenient C library. It is possible to use this C library directly when no communication with the host system is required, i.e. if one wants to write the acquired data into a file. When making changes to the FPGA image one may need to adapt the rp-daq-lib C library.","category":"page"},{"location":"architecture.html#Client-Server-Interface-1","page":"Architecture","title":"Client - Server Interface","text":"","category":"section"},{"location":"architecture.html#","page":"Architecture","title":"Architecture","text":"The DAQ server uses the rp-daq-lib C library and allows to access its functions via TCP/IP. The server has three main purposes:","category":"page"},{"location":"architecture.html#","page":"Architecture","title":"Architecture","text":"It translates from TCP commands to C commands\nIt sends the data acquired with the fast ADCs to the client. Not all data is send but only the data requested by the client\nIt maintains a controller thread for feeding the slow DACs in a fully synchronized fashion.","category":"page"},{"location":"architecture.html#Application-Client-Interface-1","page":"Architecture","title":"Application - Client Interface","text":"","category":"section"},{"location":"architecture.html#","page":"Architecture","title":"Architecture","text":"In principle it is possible to write the client in any programming language. The RedPitayaDAQServer offers a simple client implemented in Python and a more sophisticated client implemented in Julia.","category":"page"},{"location":"installation.html#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation.html#Alpine-Linux-Image-1","page":"Installation","title":"Alpine Linux Image","text":"","category":"section"},{"location":"installation.html#","page":"Installation","title":"Installation","text":"The RedPitayaDAQServer project uses a custom RedPitaya image that was derived from the red-pitaya-notes project. It consists of an Alpine Linux with some development tools installed. Additionally the image reserves the upper 128 MB of main memory for the FPGA, which is used as a buffer for recording the data from the fast ADCs. The linux image can be downloaded here. Just unzip the zip file and copy the content on an empty SD card that is formatted in FAT32. When you insert the SD card into the RedPitaya you should see a blinking LED.","category":"page"},{"location":"installation.html#Setting-Up-the-Server-1","page":"Installation","title":"Setting Up the Server","text":"","category":"section"},{"location":"installation.html#","page":"Installation","title":"Installation","text":"Next you need to install the server application. To this end, connect the RedPitaya to you local network and access the device via ssh:","category":"page"},{"location":"installation.html#","page":"Installation","title":"Installation","text":"ssh root@rp-f?????.local","category":"page"},{"location":"installation.html#","page":"Installation","title":"Installation","text":"where ????? is the ID that is printed on the RedPitaya. The default password is root. After logging into the RedPitaya go to the folder","category":"page"},{"location":"installation.html#","page":"Installation","title":"Installation","text":"/root/apps/","category":"page"},{"location":"installation.html#","page":"Installation","title":"Installation","text":"and clone the RedPitayaDAQServer project:","category":"page"},{"location":"installation.html#","page":"Installation","title":"Installation","text":"git clone https://github.com/tknopp/RedPitayaDAQServer","category":"page"},{"location":"installation.html#","page":"Installation","title":"Installation","text":"Then cd into RedPitayaDAQServer","category":"page"},{"location":"installation.html#","page":"Installation","title":"Installation","text":"cd /root/apps/RedPitayaDAQServer","category":"page"},{"location":"installation.html#","page":"Installation","title":"Installation","text":"and enter make. This will compile the library, the server, and some example applications. After you restart the RedPitaya the DAQ server will automatically run and you can access it via TCP.","category":"page"},{"location":"fpga.html#FPGA-Development-1","page":"FPGA Development","title":"FPGA Development","text":"","category":"section"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"There may be needs to change the FPGA image. The following explains how this can be done.","category":"page"},{"location":"fpga.html#Preparation-1","page":"FPGA Development","title":"Preparation","text":"","category":"section"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"If you want to make changes to the FPGA design, you need to install Vivado 2017.2. More infos for setting up a development machine we refer to the following recource.","category":"page"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"After following the installation steps, you need to clone the repository into a directory of your choice and then regenerate the IP cores  and the project by running","category":"page"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"./make_fpga_project.sh.","category":"page"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"Afterwards you can start Vivado and open the recreated project in ./build/fpga/firmware/RedPitayaDAQServer.xpr. Apply the changes you need and then create the bitfile by using 'Flow -> Generate Bitstream'. This runs the synthesis and implementation steps and output the Bitfile to ./build/fpga/firmware/RedPitayaDAQServer.runs/impl_1/system_wrapper.bit. Please note, that you have to create both the master and the slave image. This can be done by simply changing the value of xlconstantmasterslave_. A '1' denotes the use of the internal ADC clock and is used for the master. A '0' selects the clock distributed via the daisy chain connectors and is therefore used for the slaves.","category":"page"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"(Image: Clock selection in the blockdesign)","category":"page"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"After creating the respective bitfile you need to copy it to your Red Pitayas. You can use","category":"page"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"scp ./build/fpga/firmware/RedPitayaDAQServer.runs/impl_1/system_wrapper.bin root@<IP>:/root/RedPitayaDAQServer/bitfiles/<master,slave>.bin","category":"page"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"for this. Set your IP and master/slave accordingly.","category":"page"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"Since using git with Vivado can be annoying here are some hints how you can make your changes ready for git:","category":"page"},{"location":"fpga.html#","page":"FPGA Development","title":"FPGA Development","text":"If you only changed some stuff in the blockdesign, you just have to export the blockdesign to ./src/fpga/bd by using 'File -> Export -> Export Block Design' in Vivado.\nChanges to the project settings have to be done in ./src/fpga/build.tcl in order to not lose the ability to recreate your changed project.\nFor your own IP cores, just create a new directory in ./src/fpga/cores and copy and adapt the core_config.tcl of another core. Afterwards re-run make_cores.tcl.","category":"page"},{"location":"index.html#RedPitayaDAQServer-1","page":"Home","title":"RedPitayaDAQServer","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Advanced DAQ Tools for the RedPitaya (STEMlab 125-14)","category":"page"},{"location":"index.html#Introduction-1","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"This project contains software to be used with the STEMlab 125-14 device from RedPitaya. It allows for continuous generation and measurement of signals with up to 15.625 MS/s, which is not possible with the standard image of the RedPitaya. In addition, the software allows to synchronize a cluster of multiple RedPitayas. This project contains the following parts:","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Alpine Linux image for the RedPitaya\nFPGA image\nClient library (implemented in C) that can be used on the RedPitaya\nSCPI Server for accessing the functionality over TCP/IP\nSCPI Clients to access the server","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"The code is distributed into two different repositories:","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"RedPitayaDAQServer contains the main part of the project including the FPGA code, the client library, the server, and a client implemented in Python.\nRedPitayaDAQServer.jl is a client library implemented in the programming language Julia. This is the reference client library that is used by the developers of this project.","category":"page"},{"location":"index.html#License-/-Terms-of-Usage-1","page":"Home","title":"License / Terms of Usage","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"The source code of this project is licensed under the MIT license. This implies that you are free to use, share, and adapt it. However, please give appropriate credit by citing the project.","category":"page"},{"location":"index.html#Contact-1","page":"Home","title":"Contact","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"If you have problems using the software, find mistakes, or have general questions please use the issue tracker to contact us.","category":"page"},{"location":"index.html#Contributors-1","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Tobias Knopp\nJonas Schumacher\nMatthias Gräser","category":"page"},{"location":"index.html#Credit-1","page":"Home","title":"Credit","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"This package is partly based on work of Koheron [1] and Pavel Demin [2]","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"[1] https://www.koheron.com/blog/2016/11/29/red-pitaya-cluster [2] https://github.com/pavel-demin/red-pitaya-notes","category":"page"}]
}
